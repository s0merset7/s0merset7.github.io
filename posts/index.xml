<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Somerset&#39;s Blog</title>
    <link>https://s0merset7.github.io/posts/</link>
    <description>Somerset&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2021
All rights reserved</copyright>
    <lastBuildDate>Sat, 23 Oct 2021 23:23:45 -0700</lastBuildDate><atom:link href="https://s0merset7.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
      <item>
        <title>Introduction to Open Source Intelligence (OSINT)</title>
        <link>https://s0merset7.github.io/posts/osint/introtoosint/</link>
        <pubDate>Sat, 23 Oct 2021 23:23:45 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/osint/introtoosint/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Much of the below information is summarized from OSINT Combine&amp;rsquo;s course &amp;ldquo;Trace Labs OSINT Foundations Course&amp;rdquo;. Much credit goes to Chris Poulter&amp;rsquo;s expertise! Check out their website and partners the sources
Open Source Intelligence (OSINT) is a way of searching for information on only publicly available sources (open source). While this may seem to be the same way everyone searches for information, there are many tools and methodologies that can be used to enhance your research capabilities.</description>
      </item>
    
      <item>
        <title>Reverse Engineering (Module 6)</title>
        <link>https://s0merset7.github.io/posts/reverse_engineering/reverseengineering/</link>
        <pubDate>Sun, 19 Sep 2021 12:00:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/reverse_engineering/reverseengineering/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Binary Reverse Engineering” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources
Functions and Frames  Control Flow Graphs: a way of visually representing a function
 graph: word used to describe the entire function map block: set on instructions that will execute one after the other edges: represent conditional/unconditional jumps  Blue (Unconditional Jump): a jump that will always be taken Green (Conditional Jump): the condition is met (true) Red (Conditional Jump): the condition is not met (false)   prologue: sets up the stack frame  save off the caller&amp;rsquo;s base pointer set current stack pointer as the base pointer &amp;ldquo;allocate&amp;rdquo; space on the stack (subtract from the stack pointer)   epilogue: tears down the stack frame  &amp;ldquo;deallocate&amp;rdquo; the stack mov rsp, rbp  Note: data is NOT destroyed by default   restore the old base pointer   stack frame: reserved place in memory for the stack to operate  stack pointer (rsp): points to the leftmost side of the stack frame base pointer (rbp): points to the rightmost side of the stack frame    What is the stack:</description>
      </item>
    
      <item>
        <title>Sandboxing (Module 5)</title>
        <link>https://s0merset7.github.io/posts/sandboxing_post/sandboxingpost/</link>
        <pubDate>Sun, 12 Sep 2021 17:30:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/sandboxing_post/sandboxingpost/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Sandboxing” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources
What is Sandboxing?  Idea Behind Sandboxing:
 Untrusted data/code should live in a process with almost zero permissions   Spawn &amp;ldquo;privileged&amp;rdquo; parent process Spawn &amp;ldquo;sandboxed&amp;rdquo; child processes When a child needs to perform a privileged action, it asks the parent     chroot  What is chroot (change-root):   used to be the de-facto sandboxing utility changes the meaning of &amp;ldquo;/&amp;rdquo; for a process (and its children)  chroot(&amp;quot;/tmp/jail&amp;quot;) will disallow processes from getting out of the jail   no syscall filtering or other isolation chroot() does NOT:  Close resources that reside outside of the jail cd (chdir()) into the jail Do anything else!</description>
      </item>
    
      <item>
        <title>Shellcoding (Module 4)</title>
        <link>https://s0merset7.github.io/posts/shellcoding_post/shellcodingpost/</link>
        <pubDate>Mon, 06 Sep 2021 19:00:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/shellcoding_post/shellcodingpost/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Shellcode Injection” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources
This module relies heavily on preexisting x86 knowledge, so if you don&amp;rsquo;t have experience with x86 then I&amp;rsquo;d recommend taking a look at the last post and learning some of the basics or the rest of this post won&amp;rsquo;t make much sense.</description>
      </item>
    
      <item>
        <title>Assembly Refresher (Module 3)</title>
        <link>https://s0merset7.github.io/posts/assembly_refresher/assemblyrefresher/</link>
        <pubDate>Fri, 03 Sep 2021 20:11:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/assembly_refresher/assemblyrefresher/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Assembly Refresher” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources
This module relies heavily on preexisting x86 knowledge, so if you don&amp;rsquo;t have experience with x86 then I&amp;rsquo;d recommend starting with Resources and learning some of the basics or the rest of this post won&amp;rsquo;t make much sense.</description>
      </item>
    
      <item>
        <title>Program Misuse (Module 2)</title>
        <link>https://s0merset7.github.io/posts/program_misuse/programmisuse/</link>
        <pubDate>Thu, 02 Sep 2021 14:00:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/program_misuse/programmisuse/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili&amp;rsquo;s pwn.college lectures from the “Program Misuse” module. Much credit goes to Yan&amp;rsquo;s expertise! Please check out the pwn.college resources and challenges in the sources
In module 2 there wasn&amp;rsquo;t as much content to cover so this post isn&amp;rsquo;t too long. I&amp;rsquo;d still reccomend checking out the lectures yourself for demonstrations on each of the topics covered.</description>
      </item>
    
      <item>
        <title>Program Interaction (Module 1)</title>
        <link>https://s0merset7.github.io/posts/program_interaction/programinteraction/</link>
        <pubDate>Thu, 02 Sep 2021 12:13:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/program_interaction/programinteraction/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  As a part of my degree program, I have to take a class called CSE466: Computer Systems Security. The professor for this class (Dr. Shoshitaishvili) created pwn.college, a free education platform to guide not only students in the course, but anyone who wants to try it out. I will be publishing all of my notes from each relevant module of course here, though I highly recommend watching the lectures for yourself as they go much more in-depth!</description>
      </item>
    
      <item>
        <title>Making Regex Rules in Semgrep</title>
        <link>https://s0merset7.github.io/posts/regex_walkthrough/</link>
        <pubDate>Mon, 12 Jul 2021 07:18:20 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/regex_walkthrough/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  One feature of Semgrep is the ability to use regular expressions (regex) in your rule making. In the previous post we discussed what Semgrep is and how to use it, here we will be focusing specifically on how to use Semgrep in conjunction with regex as it can get complicated
Setup  Make sure you have a good understanding of how to use Semgrep, especially with creating your own custom YAML rules</description>
      </item>
    
      <item>
        <title>Introduction to Semgrep</title>
        <link>https://s0merset7.github.io/posts/semgrep_intro/semgrepnotes/</link>
        <pubDate>Wed, 16 Jun 2021 15:13:52 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/semgrep_intro/semgrepnotes/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  The goal of this post is to give an introduction into how to create rules using Semgrep as well as getting a broad overview of what the tool is. The structure here will be to first explore the tool, then go into examples on how to use it with the User Interface(UI) to understand the logic, then finally go into how to actually code the rules on a more complex level.</description>
      </item>
    
      <item>
        <title>Website Penetration Testing</title>
        <link>https://s0merset7.github.io/posts/website_pentesting/webpentesting/</link>
        <pubDate>Mon, 31 May 2021 16:30:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/website_pentesting/webpentesting/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Much of the below information is summarized from Gus Khawaja&amp;rsquo;s Pluralsight course &amp;ldquo;Pentration Testing and Ethical Hacking with Kali Linux&amp;rdquo;. Much credit goes to Gus&amp;rsquo;s expertise! Check out his blog in the sources and how to get started with Pluralsight
There is a LOT to do when it comes to website penetration testing, and this post is by no means a comprehensive list of everything to do or than can be done.</description>
      </item>
    
      <item>
        <title>External Pen-Testing</title>
        <link>https://s0merset7.github.io/posts/external_pentesting/externalpentesting/</link>
        <pubDate>Sun, 30 May 2021 15:10:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/external_pentesting/externalpentesting/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Much of the below information is summarized from Gus Khawaja&amp;rsquo;s Pluralsight course &amp;ldquo;Pentration Testing and Ethical Hacking with Kali Linux&amp;rdquo;. Much credit goes to Gus&amp;rsquo;s expertise! Check out his blog in the sources and how to get started with Pluralsight
External Pen Testing is the process of testing the security surrounding external systems connected to the internet.</description>
      </item>
    
      <item>
        <title>Information Gathering (Reconnaissance Phase)</title>
        <link>https://s0merset7.github.io/posts/information_gathering/informationgathering/</link>
        <pubDate>Thu, 27 May 2021 15:40:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/information_gathering/informationgathering/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Much of the below information is summarized from Gus Khawaja&amp;rsquo;s Pluralsight course &amp;ldquo;Pentration Testing and Ethical Hacking with Kali Linux&amp;rdquo;. Much credit goes to Gus&amp;rsquo;s expertise! Check out his blog in the sources and how to get started with Pluralsight
In this post, I will be demonstrating some of the tools and processes used during the Information Gathering (or Passive Reconnaissance) phase of pentesting.</description>
      </item>
    
      <item>
        <title>Pre-Pentration Test Checklist</title>
        <link>https://s0merset7.github.io/posts/pentesting_checklist/</link>
        <pubDate>Sun, 16 May 2021 20:24:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/pentesting_checklist/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Much of the below information is summarized from Gus Khawaja&amp;rsquo;s Pluralsight course &amp;ldquo;Pentration Testing and Ethical Hacking with Kali Linux&amp;rdquo;. Much credit goes to Gus&amp;rsquo;s expertise! Check out his blog in the sources and how to get started with Pluralsight
Penetration testing is defined as the process of assessing the security model of an organization. When we perform a pentest, we want to make sure we not only do proper research, but also ensure that we are conducting the pentest properly and within the bounds of the client&amp;rsquo;s needs, as well as making sure to protect ourselves in the process.</description>
      </item>
    
      <item>
        <title>Useful Websites</title>
        <link>https://s0merset7.github.io/posts/useful_sites/</link>
        <pubDate>Sun, 16 May 2021 18:44:00 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/useful_sites/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  There are hundreds of websites out there with useful information and helpful tools that can be used while hacking, so I decided to create a list of helpful websites for different aspects of hacking as I come along them. I will make sure to update this list as I come across more, so make sure to check back regularly!</description>
      </item>
    
      <item>
        <title>Kali Linux Setup and Customization</title>
        <link>https://s0merset7.github.io/posts/kali_setup/kali_setup/</link>
        <pubDate>Fri, 14 May 2021 20:34:33 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/kali_setup/kali_setup/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Note: Much of the below information is summarized from Gus Khawaja&amp;rsquo;s Pluralsight course &amp;ldquo;Pentration Testing and Ethical Hacking with Kali Linux&amp;rdquo;. Much credit goes to Gus&amp;rsquo;s expertise! Check out his blog in the sources and how to get started with Pluralsight
There are two main ways in which you can set up Kali Linux, you can either create a Virtual Machine (VM) and install the Kali Operating System (OS), or you can Single/Dual Boot your computer to have Kali (both of which are 100% free).</description>
      </item>
    
      <item>
        <title>Walkthrough of Jerry Machine – Hack the Box</title>
        <link>https://s0merset7.github.io/posts/jerry_machine/</link>
        <pubDate>Sun, 23 Aug 2020 23:56:29 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/jerry_machine/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }   In a new terminal window, run nmap -sC -sV 10.10.10.95 -sC: Adds on the &amp;ldquo;default&amp;rdquo; scripts to be run which include things like &amp;ldquo;Speed&amp;rdquo;, &amp;ldquo;usefulness&amp;rdquo;, and &amp;ldquo;Intrusiveness&amp;rdquo;. You can check them out in more detail by looking under &amp;ldquo;default&amp;rdquo; in the Script Categories section on this website -sV: Probe open ports to determine service/version info    It looks like we only have one open port (8080) and it&amp;rsquo;s running a service called Apache Tomcat/Coyote JSP engine 1.</description>
      </item>
    
      <item>
        <title>Walkthrough of Lame Machine – Hack the Box</title>
        <link>https://s0merset7.github.io/posts/lame_machine/</link>
        <pubDate>Sun, 23 Aug 2020 23:56:20 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/lame_machine/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }   In a new terminal window, run nmap -sV -O -F --version-light 10.10.10.3   Another option is to open Zenmap and run a port scan on the same IP (to see just the information on the ports, you can go to the Ports/Hosts tab) Zenmap is a program that does a really good job at visualizing and breaking down nmap commands into digestible bites       Now there a a LOT of different ways to use nmap, and being that I&amp;rsquo;m still learning you are going to be seeing a lot of different versions, but I will do my best to explain what each version does.</description>
      </item>
    
      <item>
        <title>Hack the Box Walkthroughs Intro</title>
        <link>https://s0merset7.github.io/posts/intro/</link>
        <pubDate>Sun, 23 Aug 2020 23:34:33 -0700</pubDate>
        
        <guid>https://s0merset7.github.io/posts/intro/</guid>
        <description>main { margin: 90px auto; padding: 0 15px; max-width: 70%; }  Hello and welcome to my walkthroughs for Hack the Box (HTB). I&amp;rsquo;ve challenged myself with completing 50 HTB machines to learn hacking tools and skills that will prepare me for a career in the field. Being that I am a beginner at the time of writing this, I won&amp;rsquo;t be able to solve any machine without guidance at first, so my plan is as follows:</description>
      </item>
    
  </channel>
</rss>