<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwn.college on s0merset7&#39;s Blog</title>
    <link>https://s0merset7.github.io/tags/pwn.college/</link>
    <description>Recent content in Pwn.college on s0merset7&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Apr 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://s0merset7.github.io/tags/pwn.college/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic Allocator Misuse (Module B)</title>
      <link>https://s0merset7.github.io/post/2022/mar/dynamicallocatormisuse/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://s0merset7.github.io/post/2022/mar/dynamicallocatormisuse/</guid>
      <description>Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Memory Errors” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources&#xA;Dynamic Allocator Misuse (Module B) Table of Contents The Heap Types of Memory How the Heap Works The Data Segment Dangers of the Heap Thread Local Caching (tcache) Freeing Allocating Metadata and Chunks Sources The Heap Types of Memory ELF .</description>
    </item>
    <item>
      <title>Memory Errors (Module 8)</title>
      <link>https://s0merset7.github.io/post/2022/apr/memoryerrors/</link>
      <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://s0merset7.github.io/post/2022/apr/memoryerrors/</guid>
      <description>Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Memory Errors” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources&#xA;Memory Errors (Module 8) Table of Contents High-Level Problems Stack Smashing Causes of Corruption Stack Canaries Address Space Layout Resolution Overwriting Page Offsets Causes of Disclosure Sources High-Level Problems (with the C language) Trusting the Developer C is very low level, and trusts the developer knows what they are doing, even if it doest make sense.</description>
    </item>
    <item>
      <title>Reverse Engineering (Module 6)</title>
      <link>https://s0merset7.github.io/post/2021/sept/reverse_engineering/reverseengineering/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://s0merset7.github.io/post/2021/sept/reverse_engineering/reverseengineering/</guid>
      <description>Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Binary Reverse Engineering” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources&#xA;Functions and Frames Control Flow Graphs: a way of visually representing a function&#xA;graph: word used to describe the entire function map block: set on instructions that will execute one after the other edges: represent conditional/unconditional jumps Blue (Unconditional Jump): a jump that will always be taken Green (Conditional Jump): the condition is met (true) Red (Conditional Jump): the condition is not met (false) prologue: sets up the stack frame save off the caller&amp;rsquo;s base pointer set current stack pointer as the base pointer &amp;ldquo;allocate&amp;rdquo; space on the stack (subtract from the stack pointer) epilogue: tears down the stack frame &amp;ldquo;deallocate&amp;rdquo; the stack mov rsp, rbp Note: data is NOT destroyed by default restore the old base pointer stack frame: reserved place in memory for the stack to operate stack pointer (rsp): points to the leftmost side of the stack frame base pointer (rbp): points to the rightmost side of the stack frame What is the stack:</description>
    </item>
    <item>
      <title>Sandboxing (Module 5)</title>
      <link>https://s0merset7.github.io/post/2021/sept/sandboxing_post/sandboxingpost/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://s0merset7.github.io/post/2021/sept/sandboxing_post/sandboxingpost/</guid>
      <description>Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Sandboxing” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources&#xA;What is Sandboxing? Idea Behind Sandboxing:&#xA;Untrusted data/code should live in a process with almost zero permissions Spawn &amp;ldquo;privileged&amp;rdquo; parent process Spawn &amp;ldquo;sandboxed&amp;rdquo; child processes When a child needs to perform a privileged action, it asks the parent chroot What is chroot (change-root): used to be the de-facto sandboxing utility changes the meaning of &amp;ldquo;/&amp;rdquo; for a process (and its children) chroot(&amp;quot;/tmp/jail&amp;quot;) will disallow processes from getting out of the jail no syscall filtering or other isolation chroot() does NOT: Close resources that reside outside of the jail cd (chdir()) into the jail Do anything else!</description>
    </item>
    <item>
      <title>Shellcoding (Module 4)</title>
      <link>https://s0merset7.github.io/post/2021/sept/shellcoding_post/shellcodingpost/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://s0merset7.github.io/post/2021/sept/shellcoding_post/shellcodingpost/</guid>
      <description>Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Shellcode Injection” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources&#xA;This module relies heavily on preexisting x86 knowledge, so if you don&amp;rsquo;t have experience with x86 then I&amp;rsquo;d recommend taking a look at the last post and learning some of the basics or the rest of this post won&amp;rsquo;t make much sense.</description>
    </item>
    <item>
      <title>Assembly Refresher (Module 3)</title>
      <link>https://s0merset7.github.io/post/2021/sept/assembly_refresher/assemblyrefresher/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://s0merset7.github.io/post/2021/sept/assembly_refresher/assemblyrefresher/</guid>
      <description>Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili’s pwn.college lectures from the “Assembly Refresher” module. Much credit goes to Yan’s expertise! Please check out the pwn.college resources and challenges in the sources&#xA;This module relies heavily on preexisting x86 knowledge, so if you don&amp;rsquo;t have experience with x86 then I&amp;rsquo;d recommend starting with Resources and learning some of the basics or the rest of this post won&amp;rsquo;t make much sense.</description>
    </item>
    <item>
      <title>Program Misuse (Module 2)</title>
      <link>https://s0merset7.github.io/post/2021/sept/program_misuse/programmisuse/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://s0merset7.github.io/post/2021/sept/program_misuse/programmisuse/</guid>
      <description>Note: Most of the below information is summarized from Dr. Yan Shoshitaishvili&amp;rsquo;s pwn.college lectures from the “Program Misuse” module. Much credit goes to Yan&amp;rsquo;s expertise! Please check out the pwn.college resources and challenges in the sources&#xA;In module 2 there wasn&amp;rsquo;t as much content to cover so this post isn&amp;rsquo;t too long. I&amp;rsquo;d still recommend checking out the lectures yourself for demonstrations on each of the topics covered.&#xA;Privilege Escalation Every process has a user ID (UID) and and a group ID (GID) UID 0: the Linux admin user (root).</description>
    </item>
    <item>
      <title>Program Interaction (Module 1)</title>
      <link>https://s0merset7.github.io/post/2021/sept/program_interaction/programinteraction/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://s0merset7.github.io/post/2021/sept/program_interaction/programinteraction/</guid>
      <description>As a part of my degree program, I have to take a class called CSE466: Computer Systems Security. The professor for this class (Dr. Shoshitaishvili) created pwn.college, a free education platform to guide not only students in the course, but anyone who wants to try it out. I will be publishing all of my notes from each relevant module of course here, though I highly recommend watching the lectures for yourself as they go much more in-depth!</description>
    </item>
  </channel>
</rss>
